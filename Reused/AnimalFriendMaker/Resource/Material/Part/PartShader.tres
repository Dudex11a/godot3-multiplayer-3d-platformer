[gd_resource type="Shader" format=2]

[resource]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_toon, specular_toon;
uniform vec4 albedo : hint_color;
uniform sampler2D color_sampler : hint_albedo;
uniform sampler2D multiply_sampler : hint_albedo;
uniform sampler2D overlay_sampler : hint_albedo;
uniform sampler2D palette: hint_albedo;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform vec3 uv_scale = vec3(1.0);
uniform vec3 uv_offset = vec3(0.0);

void vertex() {
	UV = UV * uv_scale.xy + uv_offset.xy;
}

void fragment() {
	// Set the color of the color_sampler to the palette's
	// The r and b values of color point to where on the palette to pick from
	vec4 color_texture = texture(color_sampler, UV);
	vec4 final_color_texture = texture(palette, vec2(color_texture.r, color_texture.b));
	// Create multiply texture, it's multiplied by 2 to make white brighten colors
	vec4 multiply_texture = texture(multiply_sampler, UV) * 2.0;
	// Set ALBEDO to the multiply and color
	ALBEDO = final_color_texture.rgb * multiply_texture.rgb;
	// Overlay the overlay_sampler and multiply by albedo color
	vec4 overlay = texture(overlay_sampler, UV);
	if (length(overlay.rgb) > 3.0) {
		ALBEDO = overlay.rgb;
	}
	ALBEDO *= albedo.rgb;
	SPECULAR = specular;
	METALLIC = metallic;
	ROUGHNESS = roughness;
	ALPHA = color_texture.a;
}
"
